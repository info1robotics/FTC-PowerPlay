/*
 * Copyright (c) 2021 Titan Robotics Club (http://www.titanrobotics.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package org.firstinspires.ftc.teamcode.CommonLib.trclib;

/**
 * This class implements a trigger mechanism. A trigger can be generated by a digital sensor, an analog sensor or
 * any value source. For a digital sensor, a trigger is generated when it changes from an inactive state to an
 * active state or vise versa. For an analog sensor, a trigger is generated when the sensor value crosses a given
 * set of thresholds. This class is intended to be extended by different sensor trigger classes and they need to
 * implement the abstract methods in this class.
 */
public abstract class TrcTrigger
{
    private static final String moduleName = "TrcTrigger";
    protected static final boolean debugEnabled = false;
    private static final boolean tracingEnabled = false;
    private static final boolean useGlobalTracer = false;
    private static final TrcDbgTrace.TraceLevel traceLevel = TrcDbgTrace.TraceLevel.API;
    private static final TrcDbgTrace.MsgLevel msgLevel = TrcDbgTrace.MsgLevel.INFO;
    protected TrcDbgTrace dbgTrace = null;

    /**
     * This interface contains the notification handler to be called when the analog sensor value has crossed a
     * monitored threshold.
     */
    public interface AnalogTriggerHandler
    {
        /**
         * This method is called when an analog sensor threshold has been crossed.
         *
         * @param currZone specifies the zone it is going into.
         * @param prevZone specifies the zone it is coming out of.
         * @param value specifies the actual sensor value.
         */
        void analogTriggerEvent(int currZone, int prevZone, double value);

    }   //interface AnalogTriggerHandler

    /**
     * This interface contains the notification handler to be called when the digital sensor has changed state.
     */
    public interface DigitalTriggerHandler
    {
        /**
         * This method is called when the digital sensor has changed state.
         *
         * @param state specifies the actual sensor state.
         */
        void digitalTriggerEvent(boolean state);

    }   //interface DigitalTriggerHandler

    /**
     * This method enables/disables the trigger task that monitors the sensor value.
     *
     * @param enabled specifies true to enable, false to disable.
     */
    abstract void setEnabled(boolean enabled);

    /**
     * This method checks if the trigger task is enabled.
     *
     * @return true if enabled, false otherwise.
     */
    abstract boolean isEnabled();

    /**
     * This method reads the current analog sensor value. For digital sensor trigger, it will throw a RuntimeException.
     *
     * @return current sensor value.
     */
    abstract double getValue();

    /**
     * This method reads the current digital sensor state. For analog sensor trigger, it will throw a RuntimeException.
     *
     * @return current sensor state.
     */
    abstract boolean getState();

    protected final String instanceName;

    /**
     * Constructor: Create an instance of the object.
     *
     * @param instanceName specifies the instance name.
     */
    public TrcTrigger(String instanceName)
    {
        if (debugEnabled)
        {
            dbgTrace = useGlobalTracer?
                TrcDbgTrace.getGlobalTracer():
                new TrcDbgTrace(moduleName + "." + instanceName, tracingEnabled, traceLevel, msgLevel);
        }

        this.instanceName = instanceName;
    }   //TrcTrigger

    /**
     * This method returns the instance name.
     *
     * @return instance name.
     */
    @Override
    public String toString()
    {
        return instanceName;
    }   //toString

}   //class TrcTrigger
